{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernels
pec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"T
PU"},"cells":[{"cell_type":"code","execution_c
ount":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NWRkRTxRLZaK","outputId":
"a8403d37-a34f-4de9-ee57-7505e0982e7d","executionInfo":{"status":"ok","timestamp":1700419826024,"
user_tz":-330,"elapsed":128896,"user":{"displayName":"TYAIMLA29 KOUSTUBH","userId":"17858499035432
319099"}}},"outputs":[{"output_type":"stream","name":"stdout","text"
:["Downloading data from https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz\n","170498071/170
498071 [==============================] - 2s 0us/step\n","1563/1563 [============================
==] - 101s 63ms/step - loss: 1.7140 - accuracy: 0.3667 - val_loss: 1.
3628 - val_accuracy: 0.5033\n","313/313 - 4s - loss: 1.3628 - accuracy: 0.5033 - 4s/epoch - 13ms
/step\n","Test accuracy: 0.5033000111579895\n"]}],"source":["import tensorflow as tf\n","from ten
sorflow import keras\n","from tensorflow.keras.datasets import cifar10\n","from tensorflow.keras.m
odels import Sequential\n","from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dens
e, Dropout\n","\n","# Load and preprocess the CIFAR-10 dataset\n","(x_train, y_train), (x_test, y_t
est) = cifar10.load_data()\n","x_train, x_test = x_train / 255.0, x_test / 255.0  # Normalize pixel 
values to [0, 1]\n","\n","# Define the CNN model\n","model = Sequential([\n","    Conv2D(32, (3, 3), 
activation='relu', input_shape=(32, 32, 3)),\n","    MaxPooling2D((2, 2)),\n","    Conv2D(64, (3, 3), 
activation='relu'),\n","    MaxPooling2D((2, 2)),\n","    Conv2D(64, (3, 3), acti
vation='relu'),\n","    Flatten(),\n","    Dense(64, activation='relu'),\n","    Dropout(0.5),\n","    
Dense(10)  # 10 output classes for CIFAR-10\n","])\n","\n","# Compile the model\n","model.compile(opt
imizer='adam',\n","  



























import java.util.ArrayList;
import java.util.Collections;

public class N_club {

    static class Assignment {
        int cost;
        int student;
        int club;

        public Assignment(int cost, int student, int club) {
            this.cost = cost;
            this.student = student;
            this.club = club;
        }
    }

    public static void main(String[] args) {
        int N = 4;  // Number of students and clubs

        int costMatrix[][] = {
            {4, 20, 10, 30},
            {1, 10, 15, 5},
            {1, 40, 25, 8},
            {1, 30, 10, 20}
        };

        ArrayList<Assignment> assignments = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                assignments.add(new Assignment(costMatrix[i][j], i + 1, j + 1));
            }
        }

        Collections.sort(assignments, (a1, a2) -> Integer.compare(a1.cost, a2.cost));

        int[] assignedStudents = new int[N + 1];
        int[] assignedClubs = new int[N + 1];

        for (Assignment assignment : assignments) {
            int student = assignment.student;
            int club = assignment.club;

            if (assignedStudents[student] == 0 && assignedClubs[club] == 0) {
                assignedStudents[student] = club;
                assignedClubs[club] = student;
            }
        }

        System.out.println("Minimum Cost of Club Assignment: " + calculateTotalCost(costMatrix, assignedStudents));
        System.out.println("Club Assignments:");
        for (int i = 1; i <= N; i++) {
            System.out.println("Student " + i + " assigned to Club " + assignedStudents[i]);
        }
    }

    private static int calculateTotalCost(int[][] costMatrix, int[] assignedStudents) {
        int totalCost = 0;
        for (int i = 1; i < assignedStudents.length; i++) {
            int student = i;
            int club = assignedStudents[i];
            totalCost += costMatrix[student - 1][club - 1];
        }
        return totalCost;
    }
}





