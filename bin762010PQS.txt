{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernels
pec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"T
PU"},"cells":[{"cell_type":"code","execution_c
ount":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NWRkRTxRLZaK","outputId":
"a8403d37-a34f-4de9-ee57-7505e0982e7d","executionInfo":{"status":"ok","timestamp":1700419826024,"
user_tz":-330,"elapsed":128896,"user":{"displayName":"TYAIMLA29 KOUSTUBH","userId":"17858499035432
319099"}}},"outputs":[{"output_type":"stream","name":"stdout","text"
:["Downloading data from https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz\n","170498071/170
498071 [==============================] - 2s 0us/step\n","1563/1563 [============================
==] - 101s 63ms/step - loss: 1.7140 - accuracy: 0.3667 - val_loss: 1.
3628 - val_accuracy: 0.5033\n","313/313 - 4s - loss: 1.3628 - accuracy: 0.5033 - 4s/epoch - 13ms
/step\n","Test accuracy: 0.5033000111579895\n"]}],"source":["import tensorflow as tf\n","from ten
sorflow import keras\n","from tensorflow.keras.datasets import cifar10\n","from tensorflow.keras.m
odels import Sequential\n","from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dens
e, Dropout\n","\n","# Load and preprocess the CIFAR-10 dataset\n","(x_train, y_train), (x_test, y_t
est) = cifar10.load_data()\n","x_train, x_test = x_train / 255.0, x_test / 255.0  # Normalize pixel 
values to [0, 1]\n","\n","# Define the CNN model\n","model = Sequential([\n","    Conv2D(32, (3, 3), 
activation='relu', input_shape=(32, 32, 3)),\n","    MaxPooling2D((2, 2)),\n","    Conv2D(64, (3, 3), 
activation='relu'),\n","    MaxPooling2D((2, 2)),\n","    Conv2D(64, (3, 3), acti
vation='relu'),\n","    Flatten(),\n","    Dense(64, activation='relu'),\n","    Dropout(0.5),\n","    
Dense(10)  # 10 output classes for CIFAR-10\n","])\n","\n","# Compile the model\n","model.compile(opt
imizer='adam',\n","  










































#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <ctime>
#include <omp.h>

using namespace std;

class QuickSortMultiThreading {
public:
	QuickSortMultiThreading(int start, int end, vector<int>& arr) 
		: start_(start), end_(end), arr_(arr) {}
	
	// Finding random pivoted and partition
	// array on a pivot.
	// There are many different
	// partitioning algorithms.
	int partition(int start, int end, vector<int>& arr) {
		int i = start;
		int j = end;

		// Decide random pivot
		int pivoted = rand() % (j - i + 1) + i;

		// Swap the pivoted with end
		// element of array
		int t = arr[j];
		arr[j] = arr[pivoted];
		arr[pivoted] = t;
		j--;

		// Start partitioning
		while (i <= j) {
			if (arr[i] <= arr[end]) {
				i++;
				continue;
			}
			if (arr[j] >= arr[end]) {
				j--;
				continue;
			}
			t = arr[j];
			arr[j] = arr[i];
			arr[i] = t;
			j--;
			i++;
		}

		// Swap pivoted to its
		// correct position
		t = arr[j + 1];
		arr[j + 1] = arr[end];
		arr[end] = t;
		return j + 1;
	}

	// Function to implement
	// QuickSort method
	void operator() () {
		// Base case
		if (start_ >= end_) {
			return;
		}

		// Find partition
		int p = partition(start_, end_, arr_);

		// Divide array
		QuickSortMultiThreading left(start_, p - 1, arr_);
		QuickSortMultiThreading right(p + 1, end_, arr_);

		// Left subproblem as separate thread
		#pragma omp parallel sections
		{
			#pragma omp section
			{
				left();
			}
			#pragma omp section
			{
				right();
			}
		}
	}

private:
	int start_;
	int end_;
	vector<int>& arr_;
};

int main() {
	int n = 7;
	vector<int> arr = {54, 64, 95, 82, 12, 32, 63};
	srand(time(NULL));
	QuickSortMultiThreading(0, n - 1, arr)();
	for (int i = 0; i < n; i++) {

		// Print sorted elements
		cout << arr[i] << " ";
	}
	cout << endl;
	return 0;
}

